{"version":3,"sources":["webpack:///./src/pages/AGV.jsx","webpack:///./src/components/simpleimage/singleitem/singleitem.css.js","webpack:///./src/components/simpleimage/singleitem/singleitem.js","webpack:///./src/components/simpleimage/simpleimage.css.js","webpack:///./src/components/simpleimage/simpleimage.js"],"names":["AGV","data","singleitem","homeJson","AGV_single","AGV_t1","AGV_t2","AGV_t3","AGV_t4","AGV_t5","newquery","styled","span","p","MEDIA","TABLET","Singleitem","title","image","copy","fluid","childImageSharp","alt","Singlecontainer","div","Simpleimage"],"mappings":"2FAAA,iGAuEeA,UAlEH,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACV,kBAAC,IAAD,KACA,6BACE,kEACA,kBAAC,IAAD,CAAaC,WAAYD,EAAKE,SAASC,aACvC,qDAHF,+WAOF,4CACA,4BACE,sDADF,iFAGI,kBAAC,IAAD,CAAaF,WAAYD,EAAKE,SAASE,SAH3C,6BAKA,qEALA,oVASI,kBAAC,IAAD,CAAaH,WAAYD,EAAKE,SAASG,SAT3C,8BAYA,0EAZA,gJAeI,kBAAC,IAAD,CAAaJ,WAAYD,EAAKE,SAASI,SAf3C,mYAoBI,kBAAC,IAAD,CAAaL,WAAYD,EAAKE,SAASK,SApB3C,yBAuBA,qDAvBA,sGAyBI,kBAAC,IAAD,CAAaN,WAAYD,EAAKE,SAASM,SAE3C,8CACA,wEA5BA,iTAmCA,oEAnCA,KARE,s/BAiEK,IAAMC,EAAQ,c,ifCrEAC,IAAOC,KAAV,KAOED,IAAOE,EAAV,IAIbC,IAAMC,OAJO,MAPV,ICkBQC,EAhBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,OAAhB,OACjB,uCAEK,kBAAC,IAAD,CAAKE,MAAOF,EAAQA,EAAMG,gBAAgBD,MAAQ,GAAIE,IAAKL,IAC9D,8C,iTCNG,IAAMM,EAAkBZ,IAAOa,IAAV,IAOxBV,IAAMC,OAPkB,MCYbU,IAVK,SAAC,GAAD,IAAGvB,EAAH,EAAGA,WAAH,OACpB,kBAACqB,EAAD,KACI,kBAAC,EAAerB","file":"component---src-pages-agv-jsx-3367381d19965fa9b2dc.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from 'components/layout';\nimport Simpleimage from 'components/simpleimage';\n\nconst AGV = ({ data }) => (\n  <Layout>\n  <div>\n    <h1> Line tracking for a moving robot </h1>\n    <Simpleimage singleitem={data.homeJson.AGV_single} />\n    <h2> Why line tracking ? </h2>\n    Here we are going to learn how to use a camera to follow a line drawn on the floor. Let’s say that you want to conceive an autonomous\nrobot but you’re not ready to use mapping technologies to guide it yet. Then line tracking would be a nice and simple way to test your robot.\nTo track lines, you will need a camera and a numeric software such as Matlab or Labview.\n<h2>See the line</h2>\n<ul>\n  <li>Step 1 : Get a picture</li>\nYou can either take a picture or directly establish streaming, it’s up to you.\n    <Simpleimage singleitem={data.homeJson.AGV_t1} />\nGet a picture of your line\n<li> Step 2 : Get access to the RGB data </li>\nRGB (Red Green Blue) are 3 indexes of a pixel’s colour, usually each is defined from 0 to 255. You will need to get the RGB code of every\npixel of your screen and read the average RGB value of the line you want to track.\nFor example, perfect red is [255 , 0 , 0], perfect green is [0 , 255 , 0] and a mix would look like [125 , 125 , 0].\n    <Simpleimage singleitem={data.homeJson.AGV_t2} />\n\n“Read” your line’s RGB code\n<li>Step 3 : Get the coordinates of the pixels</li>\nNow that you know the colour indexes you’re looking for, you can get the coordinates of all the pixels whose RGB values match with your\nline.\n    <Simpleimage singleitem={data.homeJson.AGV_t3} />\nConsider each pixel as its coordinates\nUnfortunately, it is very rare that a single RGB measure matches the entire line so you can introduce a threshold admission to be sure of it.\nFor example if two pixels of your red line are respectively corresponding to RGB = [240 , 5 , 2]\nand RGB = [251 , 15 , 1], you may choose all the pixels whose RGBs are defined between [245±5 , 10±5 , 1].\n    <Simpleimage singleitem={data.homeJson.AGV_t4} />\n\nSelect the coordinates\n<li>Step 4 : See the line</li>\nCompute the coefficients of the least square line associated to the pixel coordinates you’ve found.\n    <Simpleimage singleitem={data.homeJson.AGV_t5} />\n\n<h2>Track the line</h2>\n<li>Step 1 : Define what you are looking for</li>\nUsually, you need to follow the line straight, which means you want to keep the line centered and vertical. In order to regulate it you will\nneed :\nThe distance between the line and the center of the screen D.\nD=(|a*xcenter + b*ycenter +c|)/((a2+b2)^(1/2))\nThe orientation of the line α.\nα = atan(-a/b)\n<li>Step 2 : Implement automatic control</li> </ul>\nDepending on your robot/vehicle, you will need to implement different automatic controls to monitor your motors.\nFor “classical” applications such as wheeled robots you can configure it at low speed by implementing a Full State Feedback if you can\nmodel your system and get the following State space equations. The LQ controller fits particularly well here.\n{/*{\\dot {\\underline {x}}}=\\mathbf {A}\n{\\underline {x}}+\\mathbf {B}\n{\\underline {u}};\nState equation\n{\\underline {y}}=\\mathbf {C}\n{\\underline {x}}+\\mathbf {D}\n{\\underline {u}}*/}\nMeasurement equation\nWhere x is a state vector, y is the output vector and u is the control vector. In this case y represents our motors inputs,\nu includes D and α, and x may correspond to y and other variables you want to estimate in your model.\nHowever if you are not familiar with State Feedbacks, you can also implement a simple feedback loop with an adjusted proportional gain, it\nwill already work just fine but you will still have to regulate the weighting between the distance factor D and the orientation\nfactor α depending on your system performances against it.\nHere is an example of a line tracking establishment I achieved at AKEOPLUS:\n</div>\n  </Layout>\n);\nexport default AGV;\nexport const newquery = graphql`\n  query AGVQuery {\n    homeJson \n    {\n      AGV_single \n      {\n        link\n        title\n        copy\n        image \n        {\n          childImageSharp \n          {\n            fluid(maxWidth: 2000, quality: 90) \n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      AGV_t1 \n      {\n        link\n        title\n        copy\n        image \n        {\n          childImageSharp \n          {\n            fluid(maxWidth: 2000, quality: 90) \n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      AGV_t2 \n      {\n        link\n        title\n        copy\n        image \n        {\n          childImageSharp \n          {\n            fluid(maxWidth: 2000, quality: 90) \n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      AGV_t3 \n      {\n        link\n        title\n        copy\n        image \n        {\n          childImageSharp \n          {\n            fluid(maxWidth: 2000, quality: 90) \n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      AGV_t4 \n      {\n        link\n        title\n        copy\n        image \n        {\n          childImageSharp \n          {\n            fluid(maxWidth: 2000, quality: 90) \n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      AGV_t5 \n      {\n        link\n        title\n        copy\n        image \n        {\n          childImageSharp \n          {\n            fluid(maxWidth: 2000, quality: 90) \n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n    }\n  }\n`;","import styled from 'styled-components';\nimport MEDIA from 'helpers/mediaTemplates';\n\nexport const Title = styled.span`\n  display: block;\n  font-size: 2rem;\n  font-weight: 500;\n  margin: 2rem 2rem 1rem;\n`;\n\nexport const Copy = styled.p`\n  color: #757575;\n  margin: 0 2rem 2rem;\n\n  ${MEDIA.TABLET`\n    margin-bottom: 4rem;\n  `};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Img from 'gatsby-image';\nimport { Title, Copy } from './singleitem.css';\n\nconst Singleitem = ({ title, copy, image }) => (\n  <figure>\n{/*      <Title>{title}</Title>\n*/}    <Img fluid={image ? image.childImageSharp.fluid : {}} alt={title} />\n    <figcaption>\n{/*      <Copy>{copy}</Copy>\n*/}    </figcaption>\n  </figure>\n);\n\nSingleitem.propTypes = {\n  title: PropTypes.string,\n  copy: PropTypes.string,\n  image: PropTypes.object.isRequired,\n};\n\nexport default Singleitem;\n","import styled from 'styled-components';\nimport MEDIA from 'helpers/mediaTemplates';\n\nexport const Singlecontainer = styled.div`\n  display: grid;\n  grid-template-columns: minmax(400px, max-content);\n  grid-gap: 1rem;\n  padding: 0 4rem;\n  margin: 1rem 0;\n\n  ${MEDIA.TABLET`\n    display: block;\n  `};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Singleitem from 'components/simpleimage/singleitem';\nimport { Singlecontainer } from './simpleimage.css';\n\nconst Simpleimage = ({ singleitem }) => (\n<Singlecontainer>\n    <Singleitem {...singleitem}/>\n</Singlecontainer>    \n);\n\nSimpleimage.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Simpleimage;\n"],"sourceRoot":""}