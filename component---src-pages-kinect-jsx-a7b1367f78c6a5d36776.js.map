{"version":3,"sources":["webpack:///./src/components/simpleimage/singleitem/singleitem.css.js","webpack:///./src/components/simpleimage/singleitem/singleitem.js","webpack:///./src/components/simpleimage/simpleimage.css.js","webpack:///./src/components/simpleimage/simpleimage.js","webpack:///./src/pages/kinect.jsx"],"names":["styled","span","p","MEDIA","TABLET","Singleitem","title","image","copy","fluid","childImageSharp","alt","Singlecontainer","div","Simpleimage","singleitem","kinect","data","homeJson","kinect_single","kinect_prob_seen","kinect_malfunctions","kinect_confidence","kinect_3d_mapping_wall","kinect_walk_infront","bresenham","kinectquery"],"mappings":"2iBAGqBA,IAAOC,KAAV,KAOED,IAAOE,EAAV,IAIbC,IAAMC,OAJO,MAPV,ICkBQC,EAhBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,OAAhB,OACjB,uCAEK,kBAAC,IAAD,CAAKE,MAAOF,EAAQA,EAAMG,gBAAgBD,MAAQ,GAAIE,IAAKL,IAC9D,8C,iTCNG,IAAMM,EAAkBZ,IAAOa,IAAV,IAOxBV,IAAMC,OAPkB,MCYbU,IAVK,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACpB,kBAACH,EAAD,KACI,kBAAC,EAAeG,M,kCCPpB,oGAoDeC,UA/CA,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACb,kBAAC,IAAD,KACA,6BACE,uEACA,yDAFF,6UAME,kBAAC,IAAD,CAAaF,WAAYE,EAAKC,SAASC,gBACvC,kBAAC,IAAD,CAAaJ,WAAYE,EAAKC,SAASE,mBACvC,kBAAC,IAAD,CAAaL,WAAYE,EAAKC,SAASG,sBACvC,kBAAC,IAAD,CAAaN,WAAYE,EAAKC,SAASI,oBAE3C,+CAXE,4NAcF,kBAAC,IAAD,CAAaP,WAAYE,EAAKC,SAASK,yBAdrC,+FAgBF,kBAAC,IAAD,CAAaR,WAAYE,EAAKC,SAASM,sBACvC,iEAjBE,qdAuBF,kBAAC,IAAD,CAAaT,WAAYE,EAAKC,SAASO,YAvBrC,w2CA8CK,IAAMC,EAAW","file":"component---src-pages-kinect-jsx-a7b1367f78c6a5d36776.js","sourcesContent":["import styled from 'styled-components';\nimport MEDIA from 'helpers/mediaTemplates';\n\nexport const Title = styled.span`\n  display: block;\n  font-size: 2rem;\n  font-weight: 500;\n  margin: 2rem 2rem 1rem;\n`;\n\nexport const Copy = styled.p`\n  color: #757575;\n  margin: 0 2rem 2rem;\n\n  ${MEDIA.TABLET`\n    margin-bottom: 4rem;\n  `};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Img from 'gatsby-image';\nimport { Title, Copy } from './singleitem.css';\n\nconst Singleitem = ({ title, copy, image }) => (\n  <figure>\n{/*      <Title>{title}</Title>\n*/}    <Img fluid={image ? image.childImageSharp.fluid : {}} alt={title} />\n    <figcaption>\n{/*      <Copy>{copy}</Copy>\n*/}    </figcaption>\n  </figure>\n);\n\nSingleitem.propTypes = {\n  title: PropTypes.string,\n  copy: PropTypes.string,\n  image: PropTypes.object.isRequired,\n};\n\nexport default Singleitem;\n","import styled from 'styled-components';\nimport MEDIA from 'helpers/mediaTemplates';\n\nexport const Singlecontainer = styled.div`\n  display: grid;\n  grid-template-columns: minmax(400px, max-content);\n  grid-gap: 1rem;\n  padding: 0 4rem;\n  margin: 1rem 0;\n\n  ${MEDIA.TABLET`\n    display: block;\n  `};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Singleitem from 'components/simpleimage/singleitem';\nimport { Singlecontainer } from './simpleimage.css';\n\nconst Simpleimage = ({ singleitem }) => (\n<Singlecontainer>\n    <Singleitem {...singleitem}/>\n</Singlecontainer>    \n);\n\nSimpleimage.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Simpleimage;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from 'components/layout';\nimport Simpleimage from 'components/simpleimage';\n\nconst kinect = ({ data }) => (\n  <Layout>\n  <div>\n    <h1> Simple obstacle detection with kinect </h1>\n    <h2> Continuous 3D detection </h2>\nThe Kinect camera is a distance sensor, it has an angular field of view which means that the coordinates are given through\na spherical system. You may keep it that way, but to make it easier to visualize you can also convert it to a Cartesian system.\nYou will need a Kinect camera and a numeric software such as Matlab or Labview.\n    <Simpleimage singleitem={data.homeJson.kinect_single} />\n    <Simpleimage singleitem={data.homeJson.kinect_prob_seen} />\n    <Simpleimage singleitem={data.homeJson.kinect_malfunctions} />\n    <Simpleimage singleitem={data.homeJson.kinect_confidence} />\n\n<h2>Create your map</h2>\nLet’s say that, if the camera spots an object with the (X,Y,Z) coordinates, it prints it on a map at the said location. Then by showing a wall to\nthe camera, depending on the resolution, the data will look like this :\n<Simpleimage singleitem={data.homeJson.kinect_3d_mapping_wall} />\nHowever, if someone had walked in front of the camera, then it would have looked like this :\n<Simpleimage singleitem={data.homeJson.kinect_walk_infront} />\n<h2>Can we unsee what has been seen ?</h2>\nThe issue here is that we can’t “unsee” what has been seen even if it’s long gone. This is why we need to use the Bresenham algorithm’s\nprinciple.\nBresenham algorithm's principle : For two points P1 and P2, we search for the cases which are crossed by the [P1;P2] segment.\nHere, P1 is the Kinect camera and P2 is a dot on the wall. This method gives us the “free space” (crossed cases) between the camera and the\nwall, so it helps us clear the areas which are empty.\n<Simpleimage singleitem={data.homeJson.bresenham} />\nCan it be trusted yet ?\nWe now have a continuous mapping, however its efficiency is questionable. Indeed, the Kinect camera only “believes” in what it is seeing\nright now, which is an issue when you consider its malfunctions and low accuracy. Here is an example of what we are supposed to find by\nimplementing this method alone :\nmalfunctions\nThe spot on the left comes from the Kinect camera which may find\nuncoherent data such as nul distances. To improve our mapping, we are going to use Cauchy distribution.\nFirst of all, we may consider a Normal distribution which reflects our uncertainty about the precise location of the obstacle. Here is an\nexample of an obstacle seen at 12 meters from the camera and its associated normal distribution to consider the [11,5 ; 12,5] range.\n\nThen we may add a cumulative distribution function which will behave as a gauge of confidence : the more an obstacle is seen, the more\nit is trusted. Thus a wall will be hard to remove from the map but a walking person won’t be. Moreover, malfunctions are mostly erased\nconfidence-gauge\nand the accuracy is improved.\nFinally, the outcome is really good, but the map is limited to an area of your room because you can’t move the camera. If you are interested\nin a more advanced 3D mapping you may want to assemble a motor, allowing the camera to rotate at constant rate and pursue the 3D\nmapping.\n\n</div>\n  </Layout>\n);\nexport default kinect;\nexport const kinectquery = graphql`\n  query KinectQuery {\n    homeJson \n    {\n      kinect_single \n      {\n        link\n        title\n        copy\n        image {\n          childImageSharp \n          {\n            fluid(maxWidth: 2000, quality: 90) \n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      kinect_walk_infront\n      {\n        link\n        title\n        copy\n        image\n        {\n          childImageSharp\n          {\n            fluid(maxWidth: 2000, quality: 90)\n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      kinect_prob_seen\n      {\n        link\n        title\n        copy\n        image\n        {\n          childImageSharp\n          {\n            fluid(maxWidth: 2000, quality: 90)\n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      kinect_malfunctions\n      {\n        link\n        title\n        copy\n        image\n        {\n          childImageSharp\n          {\n            fluid(maxWidth: 2000, quality: 90)\n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      kinect_confidence\n      {\n        link\n        title\n        copy\n        image\n        {\n          childImageSharp\n          {\n            fluid(maxWidth: 2000, quality: 90)\n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      kinect_3d_mapping_wall\n      {\n        link\n        title\n        copy\n        image\n        {\n          childImageSharp\n          {\n            fluid(maxWidth: 2000, quality: 90)\n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      bresenham\n      {\n        link\n        title\n        copy\n        image\n        {\n          childImageSharp\n          {\n            fluid(maxWidth: 2000, quality: 90)\n            {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n\n    }\n  }\n`;"],"sourceRoot":""}